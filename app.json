[{"name":"app.R","content":"# packages\r\nlibrary(shiny)\r\nlibrary(bslib)\r\nlibrary(plotly)\r\n\r\n# clean environment\r\nrm(list = ls())\r\n\r\ndata = data.frame(head(mtcars, 100))\r\nchoices = colnames(data)\r\nchoices = choices[-c(1)]\r\n\r\nui <- bslib::page_navbar(\r\n  bslib::nav_panel(\r\n    title = \"Tab 1\",\r\n    fillable = FALSE,\r\n    bslib::layout_sidebar(\r\n      sidebar = bslib::sidebar(\r\n        \"Sidebar\",\r\n        shiny::selectizeInput(\r\n          \"select\",\r\n          \"Choose\",\r\n          multiple = TRUE,\r\n          selected = character(0),\r\n          choices = choices\r\n        )\r\n      ),\r\n      shiny::uiOutput(\"content\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output) {\r\n  \r\n  storage <- reactiveValues(color = list())\r\n  \r\n  output$content <- shiny::renderUI({\r\n    req(input$select)\r\n    output_list <- lapply(input$select, function(parameter) {\r\n      layout_columns(\r\n        col_widths = c(8, 4),\r\n        bslib::card(\r\n          height = \"400\",\r\n          full_screen = TRUE,\r\n          bslib::card_header(\r\n            shiny::textOutput(paste0(\"title_\", parameter))\r\n          ),\r\n          bslib::layout_sidebar(\r\n            sidebar = bslib::sidebar(\r\n              shiny::selectInput(\r\n                paste0(\"select_color_\", parameter),\r\n                \"Marker color\",\r\n                choices = choices,\r\n                selected = ifelse(parameter %in% names(storage$color), storage$color[[parameter]], choices[1])\r\n              )\r\n            ),\r\n            plotlyOutput(paste0(\"plot_\", parameter))\r\n          )\r\n        ),\r\n        bslib::card(\r\n          card_header(\r\n            \"Histogram\"\r\n          ),\r\n          plotlyOutput(paste0(\"histogram_\", parameter))\r\n        )\r\n      )\r\n    })\r\n    do.call(tagList, output_list)\r\n  })\r\n  \r\n  observe({\r\n    req(input$select)\r\n    lapply(input$select, function(parameter) {\r\n      output[[paste0(\"title_\", parameter)]] <- shiny::renderText({\r\n        paste0(\"Plot \", parameter)\r\n      })\r\n      output[[paste0(\"plot_\", parameter)]] <- renderPlotly({\r\n        plot_ly(\r\n          data,\r\n          x = ~mpg,\r\n          y = ~data[[parameter]],\r\n          color = ~data[[input[[paste0(\"select_color_\", parameter)]]]],\r\n          type = 'scatter',\r\n          mode = 'markers'\r\n        )\r\n      })\r\n      output[[paste0(\"histogram_\", parameter)]] <- renderPlotly({\r\n        plot_ly(\r\n          data,\r\n          x = ~data[[parameter]],\r\n          type = 'histogram'\r\n        )\r\n      })\r\n    })\r\n  })\r\n  \r\n  observe({\r\n    req(input$select)\r\n    lapply(input$select, function(parameter) {\r\n      storage$color[[parameter]] <- input[[paste0(\"select_color_\", parameter)]]\r\n    })\r\n  })\r\n  \r\n}\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"Test #2/app.R","content":"# packages\r\nlibrary(shiny)\r\nlibrary(bslib)\r\nlibrary(plotly)\r\n\r\n# clean environment\r\nrm(list = ls())\r\n\r\ndata = data.frame(head(mtcars, 100))\r\n\r\nchoices = c(1,2,3,4,5,6,7,8,9,10)\r\n\r\nui <- bslib::page_navbar(\r\n  bslib::nav_panel(\r\n    title = \"Tab 1\",\r\n    fillable = FALSE,\r\n    bslib::layout_sidebar(\r\n      sidebar = bslib::sidebar(\r\n        \"Sidebar\",\r\n        shiny::selectizeInput(\r\n          \"select\",\r\n          \"Choose\",\r\n          multiple = TRUE,\r\n          selected = character(0),\r\n          choices = choices\r\n        )\r\n      ),\r\n      for (parameter in choices) {\r\n        initial_color <- \"blue\"#ifelse(paste0(\"title_\", parameter) %in% names(storage), storage[[paste0(\"title_\", parameter)]], \"blue\")\r\n        bslib::card(\r\n          height = \"400\",\r\n          bslib::card_header(\r\n            shiny::htmlOutput(paste0(\"title_\", parameter))\r\n          ),\r\n          bslib::layout_sidebar(\r\n            sidebar = bslib::sidebar(\r\n              shiny::radioButtons(\r\n                paste0(\"select_color_\", parameter),\r\n                \"Text color\",\r\n                choices = c(\"red\", \"blue\", \"green\"),\r\n                selected = initial_color\r\n              ),\r\n            ),\r\n            plotlyOutput(paste0(\"plot_\", parameter))\r\n          )\r\n        )\r\n      }\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output) {\r\n  \r\n  #storage <- list()\r\n  \r\n  observe({\r\n    req(input$select)\r\n    for(parameter in choices) {\r\n      if(parameter %in% input$select) {\r\n        output[[paste0(\"title_\", parameter)]] <- renderText({\r\n          color <- input[[paste0(\"select_color_\", parameter)]]\r\n          paste0(\"<font color=\\\"\", color, \"\\\">Card \", parameter,\"<\/font>\")\r\n        })\r\n      }\r\n      else {\r\n        output[[paste0(\"title_\", parameter)]] <- renderText(NULL)\r\n      }\r\n    }\r\n  })\r\n  \r\n  observe({\r\n    req(input$select)\r\n    lapply(input$select, function(parameter) {\r\n      output[[paste0(\"title_\", parameter)]] <- shiny::renderText({\r\n        \r\n      })\r\n      output[[paste0(\"plot_\", parameter)]] <- renderPlotly({\r\n        plot_ly(\r\n          data,\r\n          x = ~hp,\r\n          y = ~mpg,\r\n          type = 'scatter',\r\n          mode = 'markers'\r\n        )\r\n      })\r\n    })\r\n    #print(\"UI observer executed\")\r\n  })\r\n  \r\n  observe({\r\n    req(input$select)\r\n    lapply(input$select, function(parameter) {\r\n      #storage[[paste0(\"title_\", parameter)]] <- input[[paste0(\"select_color_\", parameter)]]\r\n    })\r\n  })\r\n  \r\n}\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"}]
